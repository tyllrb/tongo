{"name":"Tongo","tagline":"Node module for chaining together long complex mongodb queries","body":"# tongo\r\n\r\nNode library that adds some tasty syntax sugar to mongodb. Use chaining and promises to string together long complex queries. \r\n\r\n# Examples\r\n\r\n## Connecting\r\n\r\nConnecting is pretty straightforward\r\n\r\n```javascript\r\nvar Tongo = require('tongo');\r\n\r\nTongo.connect({\r\n\t'user': 'username',\r\n\t'password': 'the_password',\r\n\t'server': 'mongo.server.com',\r\n\t'database': 'the_database'\r\n})\r\n.then(function () {\r\n\t\r\n\t// connection was success\r\n\r\n})\r\n.catch(function (error) {\r\n\t\r\n\t// hmm some error occured connecting\r\n\r\n});\r\n```\r\n\r\n## How to get things from the database\r\n\r\n### GET\r\nUse ```get``` and ```from``` to get the values of specific fields from a collection. Use ```*``` to get all the fields. Note that ```from``` must be the last call on the chain, it is the function that returns the promise. \r\n\r\n```javascript\r\nTongo.get(\r\n\t'username',\r\n\t'userId',\r\n\t'pic'\r\n)\r\n.from('users')\r\n.limit(5)\r\n.then(function (data) {\r\n\t\r\n\t//do something with data\r\n\r\n})\r\n```\r\n\r\n### WHERE\r\nUse ```where``` to get fields based on certain conditional values. You can include as many conditions as you like. \r\n\r\n```javascript\r\nTongo.get(\r\n\t'username',\r\n\t'userId',\r\n\t'pic'\r\n)\r\n.where({'username': 'Tyler'})\r\n.from('users')\r\n.then(function (data) {\r\n\t\r\n\t//do something with data\r\n\r\n});\r\n```\r\n\r\n#### WHERE operations\r\nYou can specify certain operations for the fields specified in ```WHERE```. \r\n\r\n* ```:hash``` will hash the value you are passing in\r\n* ```:any``` is used for fields with arrays, checks to see if the value(s) you have passed in is found in the array\r\n\r\nExample:\r\n```Javascript\r\nTongo.get(\r\n\t'*'\r\n)\r\n.where({'password:hash': password, 'friendList:any': 'Bob'})\r\n.from('users')\r\n```\r\n\r\n#### Multiples!\r\nYou can also ```get``` from multiple collections at once. Using ```get``` and ```where``` can act as a basic joining of two datasets from different collections. \r\n\r\n```javascript\r\nTongo.get(\r\n\t'username',\r\n\t'userId',\r\n\t'comment',\r\n\t'pic'\r\n)\r\n.where({'username': 'Tyler'})\r\n.from('users', 'comments')\r\n.then(function (data) {\r\n\r\n\t//do something with data\r\n\t\r\n});\r\n```\r\n\r\nHere the ```data``` will be an object with a field for the results of getting ```'users'```, and a field for the results of getting ```'comments'```.\r\n\r\n### GET single record\r\nUse ```single``` to query for a single document, useful for when you are expecting just one result.\r\n\r\n```javascript\r\nTongo.get(\r\n\t'username',\r\n\t'userId',\r\n\t'pic'\r\n)\r\n.single()\r\n.where({'username': 'Tyler'})\r\n.then(function (data) {\r\n\t\r\n\t// do something with data\r\n\r\n});\r\n```\r\n\r\n### Paging\r\nUse ```page``` and ```limit``` to jump forward in the data by a certain amount. Fetching 3 documents on page 0 will get you the first 3 documents, fetching 3 documents on page 1 will get you the 3rd, 4th, and 5th document, fetching 3 documents on page 2 will get you the 6th, 7th, and 8th record, and so on. Useful for implementing paging controls in your UI. \r\n\r\n```javascript\r\nTongo.get(\r\n\t'username',\r\n\t'userId',\r\n\t'pic'\r\n)\r\n.limit(3)\r\n.page(1)\r\n.from('users')\r\n.then(function (data) {\r\n\t\r\n\t// you got the 3rd, 4th, and 5th user\r\n\r\n});\r\n```\r\n\r\n### Sorting\r\nUse either ```ascending()``` or ```descending()``` in the chain to get your results in those respective orders\r\n\r\n\r\n## Stuffing things into the database\r\n\r\nIn accordance with REST verbs, ```put``` is used to update a document, and ```post``` is used for creating a new document. ```into``` is used to specify which collection these modifications will be made, note that ```into``` is the last call on the chain, it is the function that returns the promise for the entire query. \r\n\r\n### PUT\r\nUse ```put```, ```where``` and ```into``` to update a document with new values. You can modify an existing field, or add an entire new one. Note that ```put``` must have a corresponding ```where``` in order to work. \r\n\r\n```javascript\r\nTongo.put({\r\n\t'username': 'Tyler2', // will update the username field with a new value\r\n\t'newFied': 'Hello' // this is an entirely new field inserted into the document\r\n})\r\n.where({'username': 'Tyler'})\r\n.into('users')\r\n.then(function (data) {\r\n\t\r\n\t// data will be the updated document\r\n\r\n});\r\n```\r\n\r\n#### PUT array operations\r\nPerforming array operations is pretty basic, use ```:add``` to add something to the array and ```:removed``` to remove it. For example, say you have a 'like' array that holds the usernames of those who have 'liked' something. Here is how you would add a new username to that list:\r\n\r\n```javascript\r\nTongo.put({\r\n\t'likes:add': username\r\n})\r\n.where({'postId': postId})\r\n.into('posts')\r\n.then(function (data) {\r\n\t\r\n\t// data will be the updated document\r\n\r\n});\r\n```\r\n\r\n### POST new document\r\nUse ```post``` and ```into``` to create a new document in a specified collection. Like using ```where```, multiple collections can be specified. \r\n\r\n```javascript\r\nTongo.post({\r\n\t'username': 'New_User :)'\r\n})\r\n.into('users')\r\n.then(function (data) {\r\n\t\r\n\t// data will be the newly created document\r\n\r\n});\r\n```\r\n\r\n#### POST aliases\r\nThere are few aliases you can use to generate certain values. \r\n\r\n* ```$timestamp``` will generate a UNIX timestamp \r\n* ```$id``` will generate a random string\r\n\r\nHeres how to use them:\r\n\r\n```javascript\r\nTongo.post({\r\n\t'username': 'Bob',\r\n\t'date_joined': '$timestamp',\r\n\t'userId': '$id'\r\n})\r\n.into('users');\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}